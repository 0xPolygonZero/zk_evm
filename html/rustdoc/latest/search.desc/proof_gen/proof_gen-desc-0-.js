searchState.loadedDescShard("proof_gen", 0, "This library is intended to generate proofs with the …\nThis module defines the proof generation methods …\nThis module defines the various proof types used …\nThis module defines the <code>ProverState</code>, that contains all …\nThis module contains type aliases and custom <code>Error</code> …\nThis module defines the <code>VerifierState</code>, that contains the …\nContains the error value\nContains the success value\nA custom error type to handle failure cases during proof …\nA type alias for <code>Result&lt;T, ProofGenError&gt;</code>.\nGenerates a dummy proof for a dummy circuit doing nothing. …\nReturns the argument unchanged.\nGenerates an aggregation block proof from two child proofs.\nGenerates a block proof.\nGenerates an aggregation proof from two child proofs.\nGenerates a transaction proof from some IR data.\nGenerates a transaction aggregation proof from two child …\nCalls <code>U::from(self)</code>.\nThe underlying proof is an aggregation proof.\nThe underlying proof is an aggregation proof.\nThe underlying proof is an aggregated proof.\nSometimes we don’t care about the underlying proof type …\nThe underlying proof is a single block proof.\nAn aggregation block proof along with its hashed public …\nA block proof along with the block height against which …\nA segment aggregation proof along with its public values, …\nA transaction proof along with its public values, for …\nA transaction aggregation proof along with its public …\nThe underlying proof is a segment proof.\nThe underlying proof is a segment proof. It first needs to …\nSometimes we don’t care about the underlying proof type …\nThe underlying proof is a transaction proof.\nAssociated block height.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnderlying plonky2 proof.\nUnderlying plonky2 proof.\nUnderlying plonky2 proof.\nUnderlying plonky2 proof.\nUnderlying plonky2 proof.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic values of this transaction proof.\nPublic values of this aggregation proof.\nPublic values of this transaction aggregation proof.\nPlonky2 proving state. Note that this is generally going …\nBuilder for the prover state.\nInstantiate the prover state from the builder. Note that …\nInstantiate the verifier state from the builder. Note that …\nGenerates a new builder from a set of default ranges. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nSpecifies a range of degrees to be supported for this STARK\nThe set of pre-processed circuits to recursively prove …\nA type alias for the set of preprocessed circuits …\nThe recursive circuit configuration to be used to shrink …\nThe extension degree of the field used in the proof system.\nThe base field on which statements are being proven.\nA type alias for proofs generated by the zkEVM.\nA type alias for the verifier data necessary to verify …\nThe block circuit, which verifies a transaction …\nHolds chains of circuits for each table and for each …\nThe EVM root circuit, which aggregates the (shrunk) …\nThe segment aggregation circuit, which verifies that two …\nThe two-to-one block aggregation circuit, which verifies …\nThe transaction aggregation circuit, which verifies the …\nPlonky2 verifier state.\nBuilder for the verifier state. This is essentially the …\nInstantiate the verifier state from the builder. Note that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe verification circuit data associated to the block …\nVerifies a <code>block_proof</code>.")