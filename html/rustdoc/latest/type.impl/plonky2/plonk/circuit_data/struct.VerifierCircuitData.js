(function() {
    var type_impls = Object.fromEntries([["proof_gen",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"impl\"><a href=\"#impl-Clone-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, C, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for VerifierCircuitData&lt;F, C, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + RichField + Extendable&lt;D&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + GenericConfig&lt;D, F = F&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; VerifierCircuitData&lt;F, C, D&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","proof_gen::types::VerifierData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"impl\"><a href=\"#impl-Debug-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, C, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for VerifierCircuitData&lt;F, C, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + RichField + Extendable&lt;D&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + GenericConfig&lt;D, F = F&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","proof_gen::types::VerifierData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, C, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for VerifierCircuitData&lt;F, C, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + RichField + Extendable&lt;D&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + GenericConfig&lt;D, F = F&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;VerifierCircuitData&lt;F, C, D&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","proof_gen::types::VerifierData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VerifierCircuitData%3CF,+C,+D%3E\" class=\"impl\"><a href=\"#impl-VerifierCircuitData%3CF,+C,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, C, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; VerifierCircuitData&lt;F, C, D&gt;<div class=\"where\">where\n    F: RichField + Extendable&lt;D&gt;,\n    C: GenericConfig&lt;D, F = F&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.to_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_bytes</a>(\n    &amp;self,\n    gate_serializer: &amp;dyn GateSerializer&lt;F, D&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, IoError&gt;</h4></section><section id=\"method.from_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bytes</a>(\n    bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n    gate_serializer: &amp;dyn GateSerializer&lt;F, D&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;VerifierCircuitData&lt;F, C, D&gt;, IoError&gt;</h4></section><section id=\"method.verify\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">verify</a>(\n    &amp;self,\n    proof_with_pis: ProofWithPublicInputs&lt;F, C, D&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.85/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;</h4></section><section id=\"method.verify_compressed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">verify_compressed</a>(\n    &amp;self,\n    compressed_proof_with_pis: CompressedProofWithPublicInputs&lt;F, C, D&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.85/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;</h4></section></div></details>",0,"proof_gen::types::VerifierData"],["<section id=\"impl-Eq-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"impl\"><a href=\"#impl-Eq-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, C, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for VerifierCircuitData&lt;F, C, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + RichField + Extendable&lt;D&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + GenericConfig&lt;D, F = F&gt;,</div></h3></section>","Eq","proof_gen::types::VerifierData"],["<section id=\"impl-StructuralPartialEq-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-VerifierCircuitData%3CF,+C,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, C, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for VerifierCircuitData&lt;F, C, D&gt;<div class=\"where\">where\n    F: RichField + Extendable&lt;D&gt;,\n    C: GenericConfig&lt;D, F = F&gt;,</div></h3></section>","StructuralPartialEq","proof_gen::types::VerifierData"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[11782]}