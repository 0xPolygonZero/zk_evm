searchState.loadedDescShard("evm_arithmetization", 0, "An implementation of a Type 1 zk-EVM by Polygon Zero.\nReturned type from a <code>SegmentDataIterator</code>, needed to prove …\nA type alias for <code>u64</code> of a block height.\nA branch node, which consists of 16 children and an …\nAn empty trie.\nContains the error value\nAn extension node, which consists of a list of nibbles and …\nStructure holding the data needed to initialize a segment.\nThe digest of trie whose data does not need to be stored.\nA leaf node, which consists of a list of nibbles and a …\nContains the success value\nA configuration containing the different parameters used …\nByte packing / unpacking unit for the EVM.\nChecks that this STARK configuration is consistent, i.e. …\nThe configuration of the FRI sub-protocol.\nOutputs the <code>FriParams</code> used during the FRI sub-protocol by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Keccak sponge STARK is used to hash a variable amount …\nThe Memory STARK is used to handle all memory read and …\nThe MemAfter STARK is used to store the memory state at …\nReturns a custom STARK configuration.\nThe number of challenge points to generate, for IOPs that …\nThe targeted security level for the proofs generated with …\nRetrieves the index of this segment.\nA typical configuration with a rate of 2, resulting in …\nA set of utility functions and constants to be used by …\nThe child of this extension node.\nA slice containing the 16 children of this branch node.\nThe path of this extension.\nThe path of this leaf node.\nThe payload of this node.\nThe payload of this node\nStructure containing all STARKs and the cross-table …\nAssociates STARK tables with a unique index.\nReturns an <code>AllStark</code> containing all the STARKs initialized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis crate enforces the correctness of reading and writing …\nByte packing registers.\nLoads each kernel assembly file and concatenates them.\nAssemble files, outputting bytes. This is for debugging …\nCancun-related constants See …\nReturns the argument unchanged.\nOutputs the Kernel code hash.\nCalls <code>U::from(self)</code>.\nTaken from …\nTaken from …\nTaken from …\nThe opcode of a standard instruction (not a <code>PUSH</code>).\nThe opcode of the <code>PUSH[n]</code> instruction, given a byte count <code>n</code>…\nThis trait defines the method which multiplies by the Fp2 …\nContains all recursive circuits used in the system. For …\nData for the block circuit, which is used to generate a …\nA map between initial degree sizes and their associated …\nA chain of shrinking wrapper circuits, ending with a final …\nData for the EVM root circuit, which is used to combine …\nData for the segment aggregation circuit, which is used to …\nData for the two-to-one block circuit, which is used to …\nData for the transaction aggregation circuit, which is …\nThe block circuit, which verifies a transaction …\nA map from <code>log_2(height)</code> to a chain of shrinking recursion …\nHolds chains of circuits for each table and for each …\nExtracts the two-to-one block aggregation public values of …\nExtracts the two-to-one block aggregation hash from a …\nOutputs the <code>VerifierCircuitData</code> needed to verify any block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a sequence of bytes into an entire prover …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPreprocess all recursive circuits used by the system.\nReturns a proof for each segment that is part of a full …\nCreate a final block proof, once all transactions of a …\nFor a given transaction payload passed as <code>GenerationInputs</code>…\nFrom an initial set of STARK proofs passed with their …\nCreate an aggregation proof, combining two contiguous …\nCreates a final transaction proof, once all segments of a …\nAggregates two proofs in manner similar to […\nThe EVM root circuit, which aggregates the (shrunk) …\nThe segment aggregation circuit, which verifies that two …\nSerializes all these preprocessed circuits into a sequence …\nThe two-to-one block aggregation circuit, which verifies …\nThe transaction aggregation circuit, which verifies the …\nComputes the length added to the public inputs vector by …\nVerifies an existing block aggregation proof.\nInputs needed for trace generation.\nMemory values used to initialize <code>MemBefore</code>.\nNumber of cycles to go after having reached the halting …\nNumber of cycles to go before starting the execution: it …\nA lighter version of <code>GenerationInputs</code>, which have been …\nThe hash of the current block, and a list of the 256 …\nThe hash of the current block, and a list of the 256 …\nInformation contained in the block header.\nInformation contained in the block header.\nState trie root of the checkpoint block. This could always …\nState trie root of the checkpoint block. This could always …\nMapping between smart contract code hashes and the …\nMapping between smart contract code hashes and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cumulative gas used after the execution of the current …\nThe cumulative gas used after the execution of the current …\nThe cumulative gas used through the execution of all …\nThe cumulative gas used through the execution of all …\nGlobal exit roots pairs <code>(timestamp, root)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA partial version of the receipt trie prior to these …\nA None would yield an empty proof, otherwise this contains …\nA partial version of the state trie prior to these …\nA partial version of the state trie prior to these …\nA partial version of each storage trie prior to these …\nA partial version of each storage trie prior to these …\nA partial version of the transaction trie prior to these …\nExpected trie roots after the transactions are executed.\nExpected trie roots after these transactions are executed.\nExpected trie roots before these transactions are executed.\nThe list of txn hashes contained in this batch.\nThe index of the transaction being proven within its block.\nThe index of the first transaction in this payload being …\nWithdrawal pairs <code>(addr, amount)</code>. At the end of the txs, …\nDecodes a transaction receipt from an RLP string, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory registers.\nColumns for the initial or final memory, ordered by …\n<code>ContinuationMemoryStark</code> is used to store the initial or …\nA STARK proof for each table, plus some metadata used to …\nUser-provided helper values to compute the <code>BLOCKHASH</code> …\nCircuit version of <code>BlockHashes</code>. <code>Target</code>s for the …\nMetadata contained in a block header. Those are identical …\nCircuit version of <code>BlockMetadata</code>. Metadata contained in a …\nAdditional block data that are specific to the local …\nCircuit version of <code>ExtraBlockData</code>. Additional block data …\nMemory values which are public.\nStructure for a Merkle cap. It is used for <code>MemBefore</code> and …\nMemory values which are public.\nMemory values which are public. Note: All the larger …\nRegisters data used to preinitialize the registers and …\nCircuit version of <code>RegistersData</code>. Registers data used to …\nNumber of <code>Target</code>s required for the extra block data.\nTrie hashes.\nCircuit version of <code>TrieRoots</code>. <code>Target</code>s for trie hashes. …\nThe base fee of this block.\nThe address of this block’s producer.\nThe blob gas used. It must fit in a <code>u64</code>.\nThe block bloom of this block, represented as the …\nThe chain id of this block.\nThe difficulty (before PoS transition) of this block.\nThe excess blob base. It must fit in a <code>u64</code>.\nThe total gas used in this block. It must fit in a <code>u32</code>.\nThe gas limit of this block. It must fit in a <code>u32</code>.\n256 previous block hashes and current block’s hash.\n256 previous block hashes and current block’s hash.\n256 previous block hashes and current block’s hash.\nBlock metadata: it remains unchanged within a block.\nBlock metadata: it remains unchanged within a block.\nBlock metadata: it remains unchanged within a block.\nThe index of this block.\nThe timestamp of this block.\nThe state trie digest of the checkpoint block.\n<code>Target</code>s for the state trie digest of the checkpoint block.\nContext.\nContext.\nReturns the degree (i.e. the trace length) of each STARK.\nExtra block data that is specific to the current proof.\nExtra block data that is specific to the current proof.\nExtra block data that is specific to the current proof.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts public values from the given public inputs of a …\nExtracts final public values from the given public inputs …\nGas used so far.\nGas used so far.\nThe accumulated gas used after execution of the local …\n<code>Target</code> for the accumulated gas used after execution of the …\nThe accumulated gas used prior execution of the local …\n<code>Target</code> for the accumulated gas used prior execution of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether we are in kernel mode.\nIndicates whether we are in kernel mode.\nMemory after.\nMemory before.\nSTARK cap.\nMerkle cap.\nA multi-proof containing all proofs for the different …\nThe hash tree root of the parent beacon block.\nThe previous 256 hashes to the current block. The leftmost …\nProgram counter.\nProgram counter.\nPublic memory values used for the recursive proofs.\nReceipts trie hash.\nRegisters at the end of the current proof.\nRegisters at the end of the current proof.\nRegisters to initialize the current proof.\nRegisters to initialize the current proof.\nStack length.\nStack length.\nTop of the stack.\nTop of the stack.\nState trie hash.\nTransaction trie hash.\nTrie hashes after the execution of the local state …\nTrie hashes after the execution of the local state …\nTrie hashes after the execution of the local state …\nTrie hashes before the execution of the local state …\nTrie hashes before the execution of the local state …\nTrie hashes before the execution of the local state …\nThe transaction count after execution of the local state …\n<code>Target</code> for the transaction count after execution of the …\nThe transaction count prior execution of the local state …\n<code>Target</code> for the transaction count prior execution of the …\nUtility method that checks whether a kill signal has been …\nGenerate traces, then create all STARK proofs.\nA utility module designed to test witness generation …\nSimulates the zkEVM CPU execution. It does not generate …\nTaken from …\nReturns the <code>Nibbles</code> corresponding to the beacon roots …\nReturns the beacon roots contract account from its …\nCreates a storage trie for an account, given a list of …\nConverts an amount in <code>ETH</code> to <code>wei</code> units.\nReturns the <code>Nibbles</code> corresponding to the beacon roots …\nReturns an initial state trie containing the beacon roots …\nConverts a decimal string to a <code>U256</code>.\nConverts an hexadecimal string to a <code>U256</code>.\nUpdates the beacon roots account storage with the provided …\nA utility module designed to verify proofs.")