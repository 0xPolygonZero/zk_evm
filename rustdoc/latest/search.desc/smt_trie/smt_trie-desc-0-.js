searchState.loadedDescShard("smt_trie", 0, "The number of bits in this sequence.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA packed encoding of these bits. Only the first (least …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSparse Merkle tree (SMT). Represented as a map from keys …\nDelete the key in the SMT.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value associated with the key if it is in the …\nReturns <code>Poseidon(x, [0,0,0,0])</code> and save it in DB.\nReturns <code>Poseidon(key || h, [1,0,0,0])</code> and save it in DB.\nHash a serialized state SMT, i.e., one where leaves hold …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize and prune the SMT into a vector of U256. Starts …\nSet the value associated with the key in the SMT. If the …\nSet the key to the hash in the SMT. Needs to be called …\nConvert a <code>HashOut</code> to a <code>U256</code>.\nConvert a <code>Key</code> to a <code>U256</code>.")